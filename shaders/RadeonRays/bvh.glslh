//
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#ifndef BVH_SET_BINDING
#define BVH_SET_BINDING 0
#endif

#define HAVE_SHAPE_INFO 0

struct bbox
{
    vec4 pmin;
    vec4 pmax;
};

#define BvhNode bbox

struct Ray
{
    vec4 o;
    vec4 d;
    //ivec2 extra;
    //ivec2 padding;
};

struct RayInternal {
    Ray ray;
    vec3 s; // precomputed shear coeffs.
    vec3 d; // permuted direction
};

RayInternal precomputeRay(Ray r) {
    RayInternal res;
    res.ray = r;
    vec3 d = r.d.xyz;
    if (abs(d.x) >= abs(d.y) && abs(d.x) >= abs(d.z)) {
        d = d.yzx;
    } else if (abs(d.y) >= abs(d.z)) {
        d = d.zxy;
    }
    res.s = vec3(-d.xy, 1.0) / d.z;
    res.d = d;
    return res;
}

struct ShapeData
{
    int id;
    int bvhidx;
    int mask;
    int padding1;
    vec4 m0;
    vec4 m1;
    vec4 m2;
    vec4 m3;
    vec4  linearvelocity;
    vec4  angularvelocity;
};

struct Face
{
    // Vertex indices
    int idx0;
    int idx1;
    int idx2;
//    int shapeidx;
//    // Primitive ID
//    int id;
//    // Idx count
//    int cnt;
//
//    ivec2 padding;
};

struct Intersection
{
    int shapeid;
    int primid;
    ivec2 padding;

    vec4 uvwt;
};

layout( std430, set = BVH_SET_BINDING, binding = 1 ) buffer restrict readonly NodesBlock
{
    bbox Nodes[];
};

layout( std430, set = BVH_SET_BINDING, binding = 2 ) buffer restrict readonly VerticesBlock
{
    float Vertices[];
};

layout( std430, set = BVH_SET_BINDING, binding = 3 ) buffer restrict readonly FacesBlock
{
    //Face Faces[];
    int Indices[];
};

#if HAVE_SHAPE_INFO
layout( std140, set = BVH_SET_BINDING, binding = 4 ) buffer restrict readonly ShapesBlock
{
    ShapeData Shapes[];
};
#endif

int getShapeMask(int faceidx) {
#if HAVE_SHAPE_INFO
    return Shapes[face.shapeidx].mask;
#else
    return ~0;
#endif
}

int getShapeId(int faceidx) {
#if HAVE_SHAPE_INFO
    return Shapes[face.shapeidx].id;
#else
    return 0;
#endif
}

//bool Ray_IsActive( in ray r )
//{
//    return 0 != r.extra.y ;
//}

//int Ray_GetMask( in ray r )
//{
//    return r.extra.x;
//}

//#define STARTIDX(x)     ((startIdxFromW(x.pmin.w)))
#define STARTIDX(x)     (int((x).pmin.w))
#define LEAFNODE(x)     (((x).pmin.w) != -1.f)
//#define LEAFNODE(x)     (((x).pmin.w) != 0.f)

int startIdxFromW(float w) {
  return (floatBitsToInt(w)) >> 4;
}

int faceCountFromW(float w) {
  return floatBitsToInt(w) & 0xf;
}

bool IntersectBox(in Ray r, in vec3 invdir, in bbox box, in float maxt)
{
    const vec3 f = (box.pmax.xyz - r.o.xyz) * invdir;
    const vec3 n = (box.pmin.xyz - r.o.xyz) * invdir;

    const vec3 tmax = max(f, n);
    const vec3 tmin = min(f, n);

    const float t1 = min(min(tmax.x, min(tmax.y, tmax.z)), maxt);
    const float t0 = max(max(tmin.x, max(tmin.y, tmin.z)), 0.f);

    return (t1 >= t0) ? true : false;
}

#define EPS 1e-4

bool IntersectTriangle( in Ray r, in vec3 v1, in vec3 v2, in vec3 v3, inout Intersection isect)
{
    const vec3 e1 = v2 - v1;
    const vec3 e2 = v3 - v1;
    const vec3 s1 = cross(r.d.xyz, e2);
    const float  invd = 1.0f/(dot(s1, e1));
    const vec3 d = r.o.xyz - v1;
    const float  b1 = dot(d, s1) * invd;
    const vec3 s2 = cross(d, e1);
    const float  b2 = dot(r.d.xyz, s2) * invd;
    const float temp = max(0, dot(e2, s2) * invd);
    
    if (b1 < -EPS || b1 > 1.f + EPS || b2 < -EPS || b1 + b2 > 1 + EPS || temp < -EPS || temp > isect.uvwt.w + EPS)
    {
        return false;
    }
    else
    {
        isect.uvwt = vec4(b1, b2, 0.f, temp);
        return true;
    }
}

// From the PBRT book.
// http://www.pbr-book.org/3ed-2018/Shapes/Triangle_Meshes.html#TriangleIntersection
bool IntersectTriangleWatertight( in RayInternal r, in vec3 v0, in vec3 v1, in vec3 v2, inout Intersection isect) {
    // Translate to ray origin.
    vec3 o = r.ray.o.xyz;
    vec3 p0 = v0 - o;
    vec3 p1 = v1 - o;
    vec3 p2 = v2 - o;

    // Permute axes to make Z dominant.
    vec3 d = r.ray.d.xyz;
    if (abs(d.x) >= abs(d.y) && abs(d.x) >= abs(d.z)) {
        // X axis is dominant.
        p0 = p0.yzx;
        p1 = p1.yzx;
        p2 = p2.yzx;
        //d = d.yzx;
    } else if (abs(d.y) >= abs(d.z)) {
        // Y axis is dominant.
        p0 = p0.zxy;
        p1 = p1.zxy;
        p2 = p2.zxy;
        //d = d.zxy;
    } // else the Z axis is dominant; already good.

    d = r.d; // Pre-permuted direction.

    // Shear d onto Z axis.
    p0.xy += r.s.xy * p0.z;
    p1.xy += r.s.xy * p1.z;
    p2.xy += r.s.xy * p2.z;

    // Compute edge function coefficients.
    float e0 = p1.x * p2.y - p1.y * p2.x;
    float e1 = p2.x * p0.y - p2.y * p0.x;
    float e2 = p0.x * p1.y - p0.y * p1.x;

    // Fall back to double precision test at triangle edges.
    if (e0 == 0.0 || e1 == 0.0 || e2 == 0.0) {
        double p2xp1y = double(p2.x) * double(p1.y);
        double p2yp1x = double(p2.y) * double(p1.x);
        e0 = float(p2yp1x - p2xp1y);
        double p0xp2y = double(p0.x) * double(p2.y);
        double p0yp2x = double(p0.y) * double(p2.x);
        e1 = float(p0yp2x - p0xp2y);
        double p1xp0y = double(p1.x) * double(p0.y);
        double p1yp0x = double(p1.y) * double(p0.x);
        e2 = float(p1yp0x - p1xp0y);
    }

    // Perform triangle edge and determinant tests.
    if ((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) {
        return false;
    }
    float det = e0 + e1 + e2;
    if (det == 0) {
        return false;
    }

    // Compute scaled hit distance to triangle and test against ray t range.
    p0.z *= r.s.z;
    p1.z *= r.s.z;
    p2.z *= r.s.z;
    float tScaled = e0 * p0.z + e1 * p1.z + e2 * p2.z;
    float tMax = isect.uvwt.w; //r.ray.o.w;
    if (det < 0 && (tScaled >= 0 || tScaled < tMax * det)) {
        return false;
    } else if (det > 0 && (tScaled <= 0 || tScaled > tMax * det)) {
        return false;
    }

    // Compute barycentric coordinates and  value for triangle intersection.
    float invDet = 1.0 / det;
    float b0 = e0 * invDet;
    float b1 = e1 * invDet;
    float b2 = e2 * invDet;
    float t = tScaled * invDet;

    // TODO: partial derivatives.
    // TODO: UVs.

    isect.uvwt = vec4(b0, b1, b2, t);
    return true;
}

bool IntersectTriangleP( in Ray r, in vec3 v1, in vec3 v2, in vec3 v3 )
{
    const vec3 e1 = v2 - v1;
    const vec3 e2 = v3 - v1;
    const vec3 s1 = cross(r.d.xyz, e2);
    const float  invd = 1.0f/(dot(s1, e1));
    const vec3 d = r.o.xyz - v1;
    const float  b1 = dot(d, s1) * invd;
    const vec3 s2 = cross(d, e1);
    const float  b2 = dot(r.d.xyz, s2) * invd;
    const float temp = dot(e2, s2) * invd;

    if ( b1 < -EPS || b1 > 1.f + EPS || b2 < -EPS || b1 + b2 > 1.f + EPS || temp < -EPS || temp > r.o.w + EPS )
    {
        return false;
    }

    else
    {
        return true;
    }
}

vec3 get_vertex(int index) {
    // TODO: this might not be the most optimal way to fetch position data.
    return vec3(
        Vertices[3*index+0],
        Vertices[3*index+1],
        Vertices[3*index+2]
    );
}

void IntersectLeafClosest( in BvhNode node, in RayInternal r, inout Intersection isect )
{
    vec3 v1, v2, v3;
    //Face face;

    int start = STARTIDX(node);
    //face = Faces[start];
    //v1 = get_vertex(face.idx0);
    //v2 = get_vertex(face.idx1);
    //v3 = get_vertex(face.idx2);
    v1 = get_vertex(Indices[3*start+0]);
    v2 = get_vertex(Indices[3*start+1]);
    v3 = get_vertex(Indices[3*start+2]);

    //int shapemask = getShapeMask(face.shapeidx);

    //if ( ( Ray_GetMask(r) & shapemask ) != 0 )
    {
        //if (IntersectTriangle(r.ray, v1, v2, v3, isect))
        if (IntersectTriangleWatertight(r, v1, v2, v3, isect))
        {
                    //isect.primid = face.id;
                    //isect.shapeid = getShapeId(face.shapeidx);
                    isect.primid = int(node.pmin.w);
                    isect.shapeid = 0;
        }
    }
}

bool IntersectLeafAny( in BvhNode node, in Ray r )
{
    vec3 v1, v2, v3;
    Face face;

    int start = STARTIDX(node);
    //face = Faces[start];
    //v1 = get_vertex(face.idx0);
    //v2 = get_vertex(face.idx1);
    //v3 = get_vertex(face.idx2);
    v1 = get_vertex(Indices[3*start+0]);
    v2 = get_vertex(Indices[3*start+1]);
    v3 = get_vertex(Indices[3*start+2]);

    //int shapemask = getShapeMask(face.shapeidx);

    //if ( (Ray_GetMask(r) & shapemask) != 0 )
    {
        if (IntersectTriangleP(r, v1, v2, v3))
        {
            return true;
        }
    }

    return false;
}

// r.o.w: max distance
bool IntersectSceneAny( in Ray r )
{
    vec3 invdir  = vec3(1.f, 1.f, 1.f)/r.d.xyz;

    int idx = 0;
    while (idx != -1)
    {
        // Try intersecting against current node's bounding box.
        // If this is the leaf try to intersect against contained triangle.
        BvhNode node = Nodes[idx];
        if (IntersectBox(r, invdir, node, r.o.w))
        {
            if (LEAFNODE(node))
            {
                if (IntersectLeafAny( node, r ) )
                {
                    return true;
                }
                else
                {
                    idx = int(node.pmax.w);
                }
            }
            // Traverse child nodes otherwise.
            else
            {
                ++idx;
            }
        }
        else
        {
            idx = int(node.pmax.w);
        }
    };

    return false;
}

// r.o.w: max distance
void IntersectSceneClosest( in Ray r, inout Intersection isect)
{
    RayInternal ri = precomputeRay(r);

    const vec3 invdir  = vec3(1.f, 1.f, 1.f)/r.d.xyz;

    isect.uvwt = vec4(0.f, 0.f, 0.f, r.o.w);
    isect.shapeid = -1;
    isect.primid = -1;

    int idx = 0;

    isect.padding.x = 667;
    isect.padding.y = 0;
    //isect.padding.y = r.padding.x;

    while (idx != -1)
    {
        // Try intersecting against current node's bounding box.
        // If this is the leaf try to intersect against contained triangle.
        BvhNode node = Nodes[idx];
        if (IntersectBox(ri.ray, invdir, node, isect.uvwt.w))
        {
            if (LEAFNODE(node))
            {
                IntersectLeafClosest(node, ri, isect);
                idx = int(node.pmax.w);
            }
            // Traverse child nodes otherwise.
            else
            {
                ++idx;
            }
        }
        else
        {
            idx = int(node.pmax.w);
        }
    };
}