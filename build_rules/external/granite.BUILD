cc_library(
    name = "granite_base",
    srcs = [
        "util/aligned_alloc.cpp",
        "util/timer.cpp",
        "vulkan/buffer.cpp",
        "vulkan/buffer_pool.cpp",
        "vulkan/command_buffer.cpp",
        "vulkan/command_pool.cpp",
        "vulkan/context.cpp",
        "vulkan/cookie.cpp",
        "vulkan/descriptor_set.cpp",
        "vulkan/device.cpp",
        "vulkan/event_manager.cpp",
        "vulkan/fence.cpp",
        "vulkan/fence_manager.cpp",
        "vulkan/image.cpp",
        "vulkan/memory_allocator.cpp",
        "vulkan/pipeline_event.cpp",
        "vulkan/query_pool.cpp",
        "vulkan/render_pass.cpp",
        "vulkan/sampler.cpp",
        "vulkan/semaphore.cpp",
        "vulkan/semaphore_manager.cpp",
        "vulkan/shader.cpp",
        "vulkan/texture_format.cpp",
        "vulkan/wsi.cpp",
        "vulkan/wsi_timing.cpp",
    ],
    hdrs = [
        "application/application.hpp",
        "application/application_wsi.hpp",
        "util/aligned_alloc.hpp",
        "util/array_view.hpp",
        "util/async_object_sink.hpp",
        "util/enum_cast.hpp",
        "util/hash.hpp",
        "util/intrusive.hpp",
        "util/intrusive_hash_map.hpp",
        "util/intrusive_list.hpp",
        "util/object_pool.hpp",
        "util/read_write_lock.hpp",
        "util/small_vector.hpp",
        "util/stack_allocator.hpp",
        "util/temporary_hashmap.hpp",
        "util/timer.hpp",
        "util/unstable_remove_if.hpp",
        "util/util.hpp",
        "util/variant.hpp",
        "util/volatile_source.hpp",
        "vulkan/buffer.hpp",
        "vulkan/buffer_pool.hpp",
        "vulkan/command_buffer.hpp",
        "vulkan/command_pool.hpp",
        "vulkan/context.hpp",
        "vulkan/cookie.hpp",
        "vulkan/descriptor_set.hpp",
        "vulkan/device.hpp",
        "vulkan/event_manager.hpp",
        "vulkan/fence.hpp",
        "vulkan/fence_manager.hpp",
        "vulkan/format.hpp",
        "vulkan/image.hpp",
        "vulkan/limits.hpp",
        "vulkan/memory_allocator.hpp",
        "vulkan/pipeline_event.hpp",
        "vulkan/query_pool.hpp",
        "vulkan/quirks.hpp",
        "vulkan/render_pass.hpp",
        "vulkan/sampler.hpp",
        "vulkan/semaphore.hpp",
        "vulkan/semaphore_manager.hpp",
        "vulkan/shader.hpp",
        "vulkan/texture_format.hpp",
        "vulkan/type_to_string.hpp",
        "vulkan/vulkan_common.hpp",
        "vulkan/vulkan_headers.hpp",
        "vulkan/wsi.hpp",
        "vulkan/wsi_timing.hpp",
    ],
    include_prefix = "granite",
    includes = [
        ".",
        "util",
        "vulkan",
    ],
    linkopts = select({
        "@bazel_tools//src/conditions:windows": ["-DEFAULTLIB:ws2_32.lib"],
        "//conditions:default": [
            "-pthread",
            "dl",
            "m",
        ],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "@spirv_cross//:spirv_cross_core",
        "@volk",
    ],
)

cc_library(
    name = "granite",
    srcs = [
        # "application/global_managers.cpp",
        # "application/application.cpp",
        # "application/application_wsi.cpp",
        # "application/platforms/application_headless.cpp",
        # "application/platforms/hw_counters/hw_counter_interface.h",
        # "application/input/input.cpp",
        # "application/scene_viewer_application.cpp",
        "event/event.cpp",
        "ecs/ecs.cpp",
        "filesystem/filesystem.cpp",
        "filesystem/path.cpp",
        "filesystem/netfs/fs-netfs.cpp",
        "network/looper.cpp",
        "network/socket.cpp",
        "network/tcp_listener.cpp",
        "math/math.cpp",
        "math/frustum.cpp",
        "math/aabb.cpp",
        "math/interpolation.cpp",
        "math/muglm/muglm.cpp",
        "math/transforms.cpp",
        "renderer/render_queue.cpp",
        "renderer/simple_renderer.cpp",
        "renderer/mesh.cpp",
        "renderer/scene.cpp",
        "renderer/shader_suite.cpp",
        "renderer/render_context.cpp",
        "renderer/camera.cpp",
        "renderer/mesh_util.cpp",
        "renderer/material_util.cpp",
        "renderer/renderer.cpp",
        "renderer/material_manager.cpp",
        "renderer/animation_system.cpp",
        "renderer/render_graph.cpp",
        "renderer/ground.cpp",
        "renderer/post/hdr.cpp",
        "renderer/post/fxaa.cpp",
        "renderer/post/smaa.cpp",
        "renderer/post/temporal.cpp",
        "renderer/post/aa.cpp",
        "renderer/post/ssao.cpp",
        "renderer/utils/image_utils.cpp",
        "renderer/lights/lights.cpp",
        "renderer/lights/clusterer.cpp",
        "renderer/lights/volumetric_fog.cpp",
        "renderer/lights/deferred_lights.cpp",
        "renderer/scene_loader.cpp",
        "renderer/mesh_manager.cpp",
        "renderer/common_renderer_data.cpp",
        "scene_formats/texture_compression.cpp",
        "scene_formats/gltf.cpp",
        "scene_formats/obj.cpp",
        "scene_formats/scene_formats.cpp",
        "scene_formats/light_export.cpp",
        "scene_formats/camera_export.cpp",
        "scene_formats/memory_mapped_texture.cpp",
        "scene_formats/texture_utils.cpp",
        "scene_formats/texture_files.cpp",
        "scene_formats/gltf_export.cpp",
        "scene_formats/rgtc_compressor.cpp",
        "threading/thread_group.cpp",
        "ui/font.cpp",
        "ui/flat_renderer.cpp",
        "ui/sprite.cpp",
        "ui/widget.cpp",
        "ui/window.cpp",
        "ui/vertical_packing.cpp",
        "ui/horizontal_packing.cpp",
        "ui/image_widget.cpp",
        "ui/label.cpp",
        "ui/slider.cpp",
        "ui/click_button.cpp",
        "ui/toggle_button.cpp",
        "ui/ui_manager.cpp",
        "util/cli_parser.cpp",
        "util/dynamic_library.cpp",
        "util/util.cpp",
        "util/lock_free_message_queue.cpp",
        "util/bitmap_to_mesh.cpp",
        "util/cooperative_task.cpp",
        "vulkan/managers/shader_manager.cpp",
        "vulkan/managers/texture_manager.cpp",
        #"compiler/compiler.cpp",
        #"renderer/ocean.cpp",
        #"renderer/fft/glfft.cpp",
        #"renderer/fft/glfft_granite_interface.cpp",
        #"renderer/fft/glfft_wisdom.cpp",
    ] + select({
        "@bazel_tools//src/conditions:windows": [
            "application/input/xinput_windows.cpp",
            "filesystem/windows/os_filesystem.cpp",
        ],
        #"@bazel_tools//src/conditions:android": [
        #    "filesystem/linux/os_filesystem.cpp",
        #    "filesystem/android/android.cpp",
        #],
        "//conditions:default": [
            "filesystem/linux/os_filesystem.cpp",
        ],
    }),
    hdrs = [
        # "application/global_managers.hpp",
        # "application/application_wsi_events.hpp",
        # "application/platforms/hw_counters/hw_counter_interface.h",
        # "application/input/input.hpp",
        # "application/events/application_events.hpp",
        # "application/scene_viewer_application.hpp",
        "event/event.hpp",
        "ecs/ecs.hpp",
        "filesystem/filesystem.hpp",
        "filesystem/path.hpp",
        "filesystem/netfs/fs-netfs.hpp",
        "network/netfs.hpp",
        "network/network.hpp",
        "math/math.hpp",
        "math/frustum.hpp",
        "math/aabb.hpp",
        "math/render_parameters.hpp",
        "math/interpolation.hpp",
        "math/muglm/muglm.hpp",
        "math/muglm/muglm_impl.hpp",
        "math/muglm/matrix_helper.hpp",
        "math/transforms.hpp",
        "math/simd.hpp",
        "math/simd_headers.hpp",
        "renderer/render_queue.hpp",
        "renderer/simple_renderer.hpp",
        "renderer/mesh.hpp",
        "renderer/scene.hpp",
        "renderer/shader_suite.hpp",
        "renderer/render_context.hpp",
        "renderer/camera.hpp",
        "renderer/material.hpp",
        "renderer/abstract_renderable.hpp",
        "renderer/render_components.hpp",
        "renderer/mesh_util.hpp",
        "renderer/material_util.hpp",
        "renderer/renderer.hpp",
        "renderer/renderer_enums.hpp",
        "renderer/material_manager.hpp",
        "renderer/animation_system.hpp",
        "renderer/render_graph.hpp",
        "renderer/ground.hpp",
        "renderer/post/hdr.hpp",
        "renderer/post/fxaa.hpp",
        "renderer/post/smaa.hpp",
        "renderer/post/temporal.hpp",
        "renderer/post/aa.hpp",
        "renderer/post/ssao.hpp",
        "renderer/utils/image_utils.hpp",
        "renderer/lights/lights.hpp",
        "renderer/lights/clusterer.hpp",
        "renderer/lights/volumetric_fog.hpp",
        "renderer/lights/light_info.hpp",
        "renderer/lights/deferred_lights.hpp",
        "renderer/scene_loader.hpp",
        "renderer/mesh_manager.hpp",
        "renderer/common_renderer_data.hpp",
        "scene_formats/texture_compression.hpp",
        "scene_formats/gltf.hpp",
        "scene_formats/obj.hpp",
        "scene_formats/scene_formats.hpp",
        "scene_formats/light_export.hpp",
        "scene_formats/camera_export.hpp",
        "scene_formats/memory_mapped_texture.hpp",
        "scene_formats/texture_utils.hpp",
        "scene_formats/texture_files.hpp",
        "scene_formats/gltf_export.hpp",
        "scene_formats/rgtc_compressor.hpp",
        "threading/thread_group.hpp",
        "ui/font.hpp",
        "ui/flat_renderer.hpp",
        "ui/sprite.hpp",
        "ui/widget.hpp",
        "ui/window.hpp",
        "ui/vertical_packing.hpp",
        "ui/horizontal_packing.hpp",
        "ui/image_widget.hpp",
        "ui/label.hpp",
        "ui/slider.hpp",
        "ui/click_button.hpp",
        "ui/toggle_button.hpp",
        "ui/ui_manager.hpp",
        "util/cli_parser.hpp",
        "util/dynamic_library.hpp",
        "util/lock_free_message_queue.hpp",
        "util/bitmap_to_mesh.hpp",
        "util/cooperative_task.hpp",
        "util/generational_handle.hpp",
        "vulkan/managers/shader_manager.hpp",
        "vulkan/managers/texture_manager.hpp",
        #"compiler/compiler.hpp",
        #"renderer/ocean.hpp",
        #"renderer/fft/glfft.hpp",
        #"renderer/fft/glfft_common.hpp",
        #"renderer/fft/glfft_interface.hpp",
        #"renderer/fft/glfft_granite_interface.hpp",
        #"renderer/fft/glfft_wisdom.hpp",
    ] + select({
        "@bazel_tools//src/conditions:windows": [
            "application/input/xinput_windows.hpp",
            "filesystem/windows/os_filesystem.hpp",
        ],
        #"@bazel_tools//src/conditions:android": [
        #    "filesystem/linux/os_filesystem.hpp",
        #    "filesystem/android/android.hpp",
        #],
        "//conditions:default": [
            "filesystem/linux/os_filesystem.hpp",
        ],
    }),
    defines = [
        "GRANITE_VULKAN_FILESYSTEM",
        #"GRANITE_PLATFORM=GLFW",
        #"GRANITE_VULKAN_SHADER_MANAGER_RUNTIME_COMPILER=1",
    ] + select({
        "@bazel_tools//src/conditions:windows": ["HAVE_XINPUT_WINDOWS"],
    }),
    includes = [
        "application",
        "application/events",
        "application/input",
        "application/platforms",
        "compiler",
        "ecs",
        "event",
        "filesystem",
        "filesystem/netfs",
        "math",
        "network",
        "renderer",
        "renderer/fft",
        "scene_formats",
        "threading",
        "ui",
        "util",
        "vulkan/managers",
    ] + select({
        "@bazel_tools//src/conditions:windows": [
            "filesystem/windows",
        ],
        #"@bazel_tools//src/conditions:android": [
        #    "filesystem/android",
        #    "filesystem/linux",
        #],
        "//conditions:default": [
            "filesystem/linux",
        ],
    }),
    linkopts = select({
        "@bazel_tools//src/conditions:windows": ["-DEFAULTLIB:ws2_32.lib"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":granite_base",
        ":libco",
        ":mikktspace",
        "@meshoptimizer",
        ":rapidjson",
        #"@shaderc",
        #"@spirv_tools",
        "@stb",
    ],
)

cc_library(
    name = "mikktspace",
    srcs = [
        "third_party/mikktspace/mikktspace.c",
    ],
    hdrs = [
        "third_party/mikktspace/mikktspace.h",
    ],
    includes = [
        "third_party/mikktspace",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "libco",
    srcs = select({
        "@bazel_tools//src/conditions:windows": [
            "third_party/libco/fiber.c",
        ],
        "//conditions:default": [
            "third_party/libco/sjlj.c",
        ],
    }),
    hdrs = [
        "third_party/libco/libco.h",
    ],
    includes = [
        "third_party/libco",
    ],
    linkopts = select({
        "@bazel_tools//src/conditions:windows": [],
        "//conditions:default": ["-pthread"],
    }),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "rapidjson",
    srcs = [
        "util/util.cpp",
    ],
    hdrs = [
        "third_party/rapidjson_wrapper.hpp",
        "util/util.hpp",
    ],
    includes = [
        "third_party",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@rapidjson",
    ],
)
